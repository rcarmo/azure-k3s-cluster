#cloud-config

write_files:
  - path: /etc/docker/daemon.json
    permissions: 0644
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {"max-size": "10m", "max-file": "5"}
      }
  - path: /root/preflight.sh
    permissions: 0755
    content: |
      #!/bin/bash
      echo "Removing snapd so it doesn't cause extra load on smaller VMs"
      apt-get purge -y snapd unattended-upgrades
      rm -rf /snap /var/snap /var/lib/snapd /var/log/unattended-upgrades
      echo "Starting preflight."
      if [ "${K3S_USE_DOCKER}" == "true" ]; then
        apt-get update
        if [ "${K3S_ENABLE_NVIDIA}" == "true" ]; then
          echo "Installing Docker CE for NVIDIA compatibility"
          curl https://get.docker.com | sh 
        else
          echo "Installing Docker"
          apt install -y docker.io
        fi
        systemctl enable docker
        echo "Starting Docker"
        systemctl start docker
        # We are not supposed to SSH to agents, but this is useful for troubleshooting
        usermod -aG docker cluster
      fi
      if [ "${K3S_ENABLE_NVIDIA}" == "true" ]; then
        echo "Installing NVIDIA drivers"
        apt-get install linux-headers-$(uname -r)
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g') \
          && cd /tmp && wget https://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64/cuda-keyring_1.0-1_all.deb \
          && dpkg -i cuda-keyring_1.0-1_all.deb
        apt-get update
        apt-get -y install nvidia-driver-520
        echo "Installing NVIDIA container toolkit"
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
          && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
          && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
                sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
                tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
        apt-get update
        apt-get install -y nvidia-docker2
      fi
      echo "Final cleanups"
      apt-get dist-upgrade -y
      apt-get autoremove -y
      echo "Rebooting."
      reboot
  - path: /root/join-cluster.sh
    permissions: 0755
    content: |
      #!/bin/bash
      mkdir -p /mnt/scratch && chmod a+w+x /mnt/scratch
      HOSTNAME=`hostname`
      # get the  cluster token
      TOKEN=$(wget -nv -q -O - --retry-connrefused --tries=0 --waitretry 5 http://master0:1337/join/$HOSTNAME)
      # install k3s and join the cluster
      if [ ${K3S_USE_DOCKER} != "true" ]; then
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=$K3S_VERSION K3S_URL=https://master0:6443 K3S_TOKEN=$TOKEN sh -
      else
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=$K3S_VERSION K3S_URL=https://master0:6443 K3S_TOKEN=$TOKEN sh -s - --docker   
      fi

  - path: /root/leave-cluster.sh
    permissions: 0755
    content: |
      #!/bin/bash
      HOSTNAME=`hostname`
      # signal the master to drain services from our node
      wget -nv -q -O - --retry-connrefused --tries=10 --waitretry 5 http://master0:1337/drain/$HOSTNAME
  - path: /root/spot-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python3

      # Leave the cluster in an orderly fashion when the spot instance is preempted or scheduled for maintenance

      from subprocess import check_output
      from socket import gethostname
      from time import sleep
      from json import loads
      from urllib.request import Request, urlopen
      from urllib.parse import urlencode

      METADATA_URL = "http://169.254.169.254/metadata/scheduledevents?api-version=2017-11-01"
      
      def get_scheduled_events():
          req = Request(METADATA_URL)
          req.add_header('Metadata', 'true')
          res = urlopen(req)
          data = loads(res.read())
          return data

      def acknowledge_event(event_id):
          req = Request(METADATA_URL, urlencode({"StartRequests":[{"EventId":event_id}]}))
          req.add_header('Metadata', 'true')
          res = urlopen(req)
          data = res.read()
          return data

      def handle_events(data):
          hostname = gethostname()
          for event in data['Events']:
              if hostname in event['Resources'] and event['EventType'] in ['Reboot', 'Redeploy', 'Preempt']:
                  check_output('/root/leave-cluster.sh', shell=True)
                  acknowledge_event(event['EventId'])

      if __name__ == '__main__':
          while(True):
             sleep(15)
             handle_events(get_scheduled_events())
  - path: /etc/systemd/system/spot-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=Azure Spot Instance Events
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/spot-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/k3s-join.service
    permissions: 0444
    content: |
      [Unit]
      Description=Join k3s cluster
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/join-cluster.sh
      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/k3s-leave.service
    permissions: 0444
    content: |
      [Unit]
      Description=Leave k3s cluster
      DefaultDependencies=no
      Before=shutdown.target reboot.target halt.target
      [Service]
      Type=oneshot
      ExecStart=/root/leave-cluster.sh
      [Install]
      WantedBy=halt.target reboot.target shutdown.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
  - path: /etc/rancher/k3s/registries.yaml
    permissions: 0444
    content: |
      mirrors:
        "master0:5000":
          endpoint:
            - http://master0:5000 

mounts:
  - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/${SHARE_NAME}
    - /srv
    - cifs
    - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0770,file_mode=0660,uid=1000,gid=1000,noperm,noatime,mfsymlinks,iocharset=utf8

apt:
  package_update: true
  package_upgrade: true
packages:
  - ntp
  #- tmux
  #- htop
  #- vim
  - fail2ban
  #- curl

runcmd:
  - echo "K3S_USE_DOCKER=$USE_DOCKER \n" >> /etc/environment
  - echo "K3S_ENABLE_NVIDIA=$ENABLE_NVIDIA \n" >> /etc/environment
  - timedatectl set-timezone Europe/Lisbon
  - systemctl enable k3s-join
  - systemctl enable k3s-leave
  - systemctl enable spot-helper
  # these are not required yet since we will be rebooting the VM
  #- systemctl start k3s-leave
  #- systemctl start k3s-join
  - /root/preflight.sh