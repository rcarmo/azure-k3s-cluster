#cloud-config

write_files:
  - path: /etc/ssh/sshd_config
    append: true
    content: |
      Port ${SSH_PORT}
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
  - path: /root/preflight.sh
    permissions: 0755
    content: |
      #!/bin/bash
      . /etc/environment
      echo "--> Removing snapd so it doesn't cause extra load on smaller VMs"
      apt-get purge -y snapd unattended-upgrades
      rm -rf /snap /var/snap /var/lib/snapd /var/log/unattended-upgrades
      echo "--> Starting preflight - Tailscale: ${K3S_ENABLE_TAILSCALE} Docker: ${K3S_USE_DOCKER}"
      apt-get update
      if [ "${K3S_ENABLE_TAILSCALE}" == "true" ]; then
        echo "Installing Tailscale."
        . /etc/os-release
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/${VERSION_CODENAME}.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/${VERSION_CODENAME}.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
        apt-get update && apt-get install tailscale
      fi
      echo "--> Installing and starting K3S $K3S_VERSION "
      # For the master we can rely on the OS docker.io package, so we do not need to download anything
      if [ "${K3S_USE_DOCKER}" == "true" ]; then
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=$K3S_VERSION sh -s - --docker
      else
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=$K3S_VERSION sh -
      fi
      # make sure we can issue sudoless Docker commands to manage images
      usermod -aG docker cluster
      echo "--> Setting up kubectl completion"
      kubectl completion bash | tee /etc/bash_completion.d/kubectl
      systemctl enable k3s-helper
      echo "--> Final cleanups"
      apt-get dist-upgrade -y
      apt-get autoremove -y
      echo "==> Rebooting."
      reboot
  - path: /etc/rancher/k3s/config.yaml
    permissions: 0644
    content: |
      write-kubeconfig-mode: "0644"
  - path: /root/k3s-helper.py
    permissions: 0755
    content: |
      #!/usr/bin/env python3
      from bottle import get, run, abort
      from subprocess import check_output
      from socket import gethostname
      from signal import signal, setitimer, ITIMER_REAL, SIGALRM
      from sys import stderr

      def cleanup(signum, frame):
          if signum in [9, 15]:
            stderr.write(f"Exiting on signal {signum}\n")
            exit(0)
          try:
              nodes = check_output('kubectl get nodes', shell=True).strip().decode("utf-8")
              untagged = map(lambda x: x.split()[0], filter(lambda x: '<none>' in x, nodes.split('\n')))
              down = map(lambda x: x.split()[0], filter(lambda x: 'NotReady' in x, nodes.split('\n')))
              for node in untagged:
                  check_output(f"kubectl label node {node} kubernetes.io/role=worker", shell=True)
              for node in down:
                  check_output(f"kubectl cordon {node}", shell=True)
                  check_output(f"kubectl delete node {node}", shell=True)
          except Exception as e:
              stderr.write(f"{e}\n")
              pass

      @get("/join/<hostname>")
      def token(hostname):
          try:
              check_output(f"kubectl uncordon {hostname}", shell=True)
          except:
              pass
          return check_output("cat /var/lib/rancher/k3s/server/node-token", shell=True).strip()
      
      @get("/drain/<hostname>")
      def drain(hostname):
          try:
              check_output(f"kubectl drain {hostname} --ignore-daemonsets --delete-local-data", shell=True)
              return check_output(f"kubectl cordon {hostname}", shell=True).strip()
          except:
              abort(404, "node not found")
        
      if gethostname() == 'master0':
          signal(SIGALRM, cleanup)
          setitimer(ITIMER_REAL, 60, 10)
          run(port=1337,host='0.0.0.0')
  - path: /etc/systemd/system/k3s-helper.service
    permissions: 0444
    content: |
      [Unit]
      Description=k3s Helper
      DefaultDependencies=no
      After=multi-user.target
      [Service]
      Type=oneshot
      ExecStart=/root/k3s-helper.py
      [Install]
      WantedBy=multi-user.target
  - path: /etc/waagent.conf
    permissions: 0444
    content: |
      ResourceDisk.Format=y
      ResourceDisk.Filesystem=ext4
      ResourceDisk.EnableSwap=y
      ResourceDisk.SwapSizeMB=2048
    # Set up the Docker daemon so that we can copy containers to a private registry exposed on master0 port 5000
  - path: /etc/docker/daemon.json
    permissions: 0444
    content: |
      {
        "insecure-registries": ["master0:5000"],
        "log-driver": "json-file",
        "log-opts": {"max-size": "10m", "max-file": "5"}
      }
  - path: /etc/rancher/k3s/registries.yaml
    permissions: 0444
    content: |
      mirrors:
        "master0:5000":
          endpoint:
            - http://master0:5000 
    # If you change the SSH port, don't forget to edit this accordingly
  - path: /etc/fail2ban/jail.d/defaults-debian.conf
    content: |
      [sshd]
      enabled = true
      port = ${SSH_PORT}

mounts:
  - - //${STORAGE_ACCOUNT_NAME}.file.core.windows.net/${SHARE_NAME}
    - /srv
    - cifs
    - vers=3.0,username=${STORAGE_ACCOUNT_NAME},password=${STORAGE_ACCOUNT_KEY},dir_mode=0770,file_mode=0660,uid=1000,gid=1000,noperm,mfsymlinks,iocharset=utf8

packages:
  - curl
  - docker.io
  - fail2ban
  - htop
  - make
  - ntp
  - python3-bottle
  - tmux
  - sudo
  - stow
  - vim

runcmd:
  - echo "K3S_USE_DOCKER=$USE_DOCKER " >> /etc/environment
  - echo "K3S_ENABLE_TAILSCALE=$ENABLE_TAILSCALE " >> /etc/environment
  - timedatectl set-timezone Europe/Lisbon
  - /root/preflight.sh
